#include <bits/stdc++.h>
#include <boost/multiprecision/cpp_int.hpp>
#include "json.hpp"   // https://github.com/nlohmann/json

using json = nlohmann::json;
using boost::multiprecision::cpp_int;

// Convert char → digit
int digitVal(char c) {
    if (c >= '0' && c <= '9') return c - '0';
    if (c >= 'A' && c <= 'Z') return 10 + (c - 'A');
    if (c >= 'a' && c <= 'z') return 10 + (c - 'a');
    return 100;
}

// Parse number string in given base → cpp_int
bool parseBase(const std::string &s, int base, cpp_int &out) {
    if (base < 2 || base > 36) return false;
    cpp_int val = 0;
    for (char c : s) {
        int d = digitVal(c);
        if (d >= base) return false;
        val = val * base + d;
    }
    out = val;
    return true;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    json j;
    std::cin >> j;  // read JSON input

    int n = j["keys"]["n"].get<int>();
    int k = j["keys"]["k"].get<int>();
    int m = k - 1; // degree

    // Collect roots
    std::vector<std::pair<int, cpp_int>> roots;
    for (auto it = j.begin(); it != j.end(); ++it) {
        if (it.key() == "keys") continue;
        int id = std::stoi(it.key());
        int base = std::stoi(it.value()["base"].get<std::string>());
        std::string v = it.value()["value"].get<std::string>();
        cpp_int root;
        if (!parseBase(v, base, root)) {
            std::cerr << "Invalid root at id " << id << "\n";
            return 1;
        }
        roots.push_back({id, root});
    }

    if ((int)roots.size() < m) {
        std::cerr << "Not enough roots!\n";
        return 1;
    }

    // Sort by id
    std::sort(roots.begin(), roots.end(),
              [](auto &a, auto &b){ return a.first < b.first; });

    // Take first m roots
    std::vector<cpp_int> chosen;
    for (int i = 0; i < m; i++) chosen.push_back(roots[i].second);

    // Build polynomial coefficients (ascending order)
    std::vector<cpp_int> coeffs = {1}; 
    for (cpp_int r : chosen) {
        std::vector<cpp_int> next(coeffs.size() + 1, 0);
        for (size_t i = 0; i < coeffs.size(); i++) {
            next[i]   += -r * coeffs[i];
            next[i+1] += coeffs[i];
        }
        coeffs.swap(next);
    }

    // Output
    std::cout << "degree: " << m << "\n";
    std::cout << "coefficients_high_to_low:\n";
    for (int i = m; i >= 0; i--) {
        std::cout << coeffs[i] << (i ? ' ' : '\n');
    }

    std::cout << "used_roots_id_value10:\n";
    for (int i = 0; i < m; i++) {
        std::cout << roots[i].first << " -> " << roots[i].second << "\n";
    }

    std::cout << "unused_roots:\n";
    for (int i = m; i < (int)roots.size(); i++) {
        std::cout << roots[i].first << " -> " << roots[i].second << "\n";
    }
}
